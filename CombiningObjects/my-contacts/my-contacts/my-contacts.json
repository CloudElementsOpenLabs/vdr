{
    "definition": {
        "createdDate": "2020-10-14 19:41:52.262608",
        "fields": [
            {
                "displayName": "",
                "level": "organization",
                "path": "activities",
                "type": "string"
            },
            {
                "displayName": "",
                "level": "organization",
                "path": "createdDate",
                "type": "string"
            },
            {
                "displayName": "",
                "level": "organization",
                "path": "email",
                "type": "string"
            },
            {
                "displayName": "",
                "level": "organization",
                "path": "id",
                "type": "string"
            },
            {
                "displayName": "",
                "level": "organization",
                "path": "lastModifiedDate",
                "type": "string"
            },
            {
                "displayName": "",
                "level": "organization",
                "path": "notes",
                "type": "string"
            },
            {
                "displayName": "",
                "level": "organization",
                "path": "source",
                "type": "string"
            }
        ],
        "objectName": "my-contacts",
        "vdrShared": false,
        "vdrShareLevel": "account"
    },
    "transformation": {
        "sfdc": {
            "configuration": [
                {
                    "level": "account",
                    "type": "addToDocumentation"
                },
                {
                    "level": "account",
                    "type": "inherit"
                },
                {
                    "level": "account",
                    "properties": {
                        "fromVendor": false,
                        "toVendor": false
                    },
                    "type": "passThrough"
                }
            ],
            "elementKey": "sfdc",
            "fields": [
                {
                    "level": "organization",
                    "path": "lastModifiedDate",
                    "type": "string",
                    "vendorPath": "LastModifiedDate",
                    "vendorType": "string"
                },
                {
                    "level": "organization",
                    "path": "source",
                    "type": "string",
                    "vendorPath": "LeadSource",
                    "vendorType": "string"
                },
                {
                    "level": "organization",
                    "path": "createdDate",
                    "type": "string",
                    "vendorPath": "CreatedDate",
                    "vendorType": "string"
                },
                {
                    "level": "organization",
                    "path": "email",
                    "type": "string",
                    "vendorPath": "Email",
                    "vendorType": "string"
                },
                {
                    "level": "organization",
                    "path": "id",
                    "type": "string",
                    "vendorPath": "Id",
                    "vendorType": "string"
                }
            ],
            "isLegacy": false,
            "objectName": "my-contacts",
            "script": {
                "body": "if (fromVendor) {\n\n  const axios = require('axios');\n\n  const ax = axios.create({\n    baseURL: `${configuration.protocol}://${configuration.host}${configuration.pathPrefix}`,\n    headers: {\n      \"accept\": \"application/json\",\n      \"Authorization\": `User ${configuration.userSecret}, Organization ${configuration.organizationSecret}, Element ${configuration.elementInstanceToken}`\n    }\n  });\n\n  const makeCall = async ({ targetField, config }) => {\n    try {\n      const res = await ax.request(config);\n      return {\n        [targetField]: res.data\n      };\n    } catch (e) {\n      return {\n        [targetField]: `Error while resolving field ${targetField}: ${e.message}`\n      };\n    }\n  };\n\n  const calls = [{\n      targetField: \"activities\",\n      config: {\n        url: `/my-contacts/${transformedObject.id}/my-contact-activities`,\n        method: \"get\", // default\n      }\n    },\n    {\n      targetField: \"notes\",\n      config: {\n        url: `/my-contacts/${transformedObject.id}/my-contact-notes`,\n        method: \"get\",\n      }\n    }\n  ];\n\n  const parseData = (data) => {\n    data.forEach(d => {\n      Object\n        .keys(d)\n        .forEach(k => transformedObject[k] = d[k]);\n    });\n\n    done(transformedObject);\n  };\n\n  const makeCalls = (configs) => {\n    Promise\n      .all(configs.map(c => makeCall(c)))\n      .then(data => parseData(data));\n  };\n\n  makeCalls(calls);\n}",
                "filterEmptyResponse": false,
                "level": "organization",
                "mimeType": "application/javascript"
            },
            "scripts": [
                {
                    "body": "if (fromVendor) {\n\n  const axios = require('axios');\n\n  const ax = axios.create({\n    baseURL: `${configuration.protocol}://${configuration.host}${configuration.pathPrefix}`,\n    headers: {\n      \"accept\": \"application/json\",\n      \"Authorization\": `User ${configuration.userSecret}, Organization ${configuration.organizationSecret}, Element ${configuration.elementInstanceToken}`\n    }\n  });\n\n  const makeCall = async ({ targetField, config }) => {\n    try {\n      const res = await ax.request(config);\n      return {\n        [targetField]: res.data\n      };\n    } catch (e) {\n      return {\n        [targetField]: `Error while resolving field ${targetField}: ${e.message}`\n      };\n    }\n  };\n\n  const calls = [{\n      targetField: \"activities\",\n      config: {\n        url: `/my-contacts/${transformedObject.id}/my-contact-activities`,\n        method: \"get\", // default\n      }\n    },\n    {\n      targetField: \"notes\",\n      config: {\n        url: `/my-contacts/${transformedObject.id}/my-contact-notes`,\n        method: \"get\",\n      }\n    }\n  ];\n\n  const parseData = (data) => {\n    data.forEach(d => {\n      Object\n        .keys(d)\n        .forEach(k => transformedObject[k] = d[k]);\n    });\n\n    done(transformedObject);\n  };\n\n  const makeCalls = (configs) => {\n    Promise\n      .all(configs.map(c => makeCall(c)))\n      .then(data => parseData(data));\n  };\n\n  makeCalls(calls);\n}",
                    "filterEmptyResponse": false,
                    "level": "organization",
                    "mimeType": "application/javascript"
                }
            ],
            "vendorName": "Contact"
        }
    },
    "vdrName": "my-contacts",
    "vdrVersion": "v2"
}